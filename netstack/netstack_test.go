package netstack

import (
	"crypto/sha1"
	"fmt"
	"regexp"
	"strings"
	"testing"

	"github.com/coversocks/gocs"
)

func TestSocks(t *testing.T) {

}

func TestPattern(t *testing.T) {
	// domain := "www.google.com"
	// parts := strings.SplitAfterN(domain, ".", 3)
	// for i, p := range parts {
	// 	parts[i] = strings.Trim(p, ".")
	// }
	// fmt.Println(parts)
	// if len(parts) == 3 {
	// 	parts = parts[1:]
	// }
	// pattern := regexp.MustCompile(fmt.Sprintf("[\\|\\.]*%v\\.%v$", parts[0], parts[1]))
	// fmt.Println(pattern.MatchString("||google.com"))
	rules, err := gocs.ReadGfwlist("../gfwlist.txt")
	if err != nil {
		t.Error((err))
		return
	}
	all := strings.Join(rules, "\n")
	// (?m)^[\|\.]*l\.google.com$
	if !regexp.MustCompile(`(?m)^[\|\.]*\.youtube.com$`).MatchString(all) {
		t.Error("not matched")
	}
	if !regexp.MustCompile(`(?m)^[\|\.]*\.google.com$`).MatchString(all) {
		t.Error("not matched")
	}
}

func TestHash(t *testing.T) {
	// data := []byte{69, 0, 0, 60, 0, 0, 0, 0, 64, 6, 91, 168, 118, 26, 252, 225, 172, 23, 0, 1, 1, 187, 177, 236, 192, 112, 37, 215, 64, 74, 71, 67, 160, 18, 114, 0, 249, 217, 0, 0, 2, 4, 5, 180, 1, 1, 8, 10, 111, 122, 204, 146, 92, 148, 5, 230, 1, 3, 3, 5}
	data2 := []byte{
		69, 0, 0, 140, 48, 132, 0, 0, 64, 17, 184, 224, 114, 114, 114, 114, 172, 23, 0, 1, 0, 53, 156, 34, 0, 120, 234, 7, 149, 14, 129, 128, 0, 1, 0, 3, 0, 0, 0, 0, 3, 119, 119, 119, 2, 113, 113, 3, 99, 111, 109, 0, 0, 1, 0, 1, 192, 12, 0, 5, 0, 1, 0, 0, 0, 104, 0, 40, 9, 112, 117, 98, 108, 105, 99, 45, 118, 54, 6, 115, 112, 97, 114, 116, 97, 3, 109, 105, 103, 13, 116, 101, 110, 99, 101, 110, 116, 45, 99, 108, 111, 117, 100, 3, 110, 101, 116, 0, 192, 40, 0, 1, 0, 1, 0, 0, 0, 33, 0, 4, 14, 18, 175, 154, 192, 40, 0, 1, 0, 1, 0, 0, 0, 33, 0, 4, 113, 96, 232, 215,
	}
	var hex byte
	for i := 0; i < len(data2)-1; i++ {
		hex += data2[i]
	}
	fmt.Printf(" %v hex %v \n", hex, data2[len(data2)-1])
}

func TestData(t *testing.T) {
	data := []byte{22, 3, 1, 1, 4, 1, 0, 1, 0, 3, 3, 203, 182, 74, 237, 118, 140, 58, 73, 106, 63, 15, 4, 8, 211, 249, 187, 34, 233, 246, 170, 40, 166, 155, 130, 137, 40, 137, 123, 68, 113, 36, 214, 32, 129, 174, 79, 234, 25, 240, 39, 228, 251, 118, 167, 193, 231, 209, 249, 91, 160, 249, 37, 9, 179, 64, 135, 243, 110, 38, 65, 153, 146, 43, 112, 73, 0, 38, 192, 47, 192, 48, 192, 43, 192, 44, 204, 168, 204, 169, 192, 19, 192, 9, 192, 20, 192, 10, 0, 156, 0, 157, 0, 47, 0, 53, 192, 18, 0, 10, 19, 1, 19, 3, 19, 2, 1, 0, 0, 145, 0, 0, 0, 18, 0, 16, 0, 0, 13, 119, 119, 119, 46, 107, 117, 120, 105, 97, 111, 46, 99, 110, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0, 10, 0, 10, 0, 8, 0, 29, 0, 23, 0, 24, 0, 25, 0, 11, 0, 2, 1, 0, 0, 13, 0, 26, 0, 24, 8, 4, 4, 3, 8, 7, 8, 5, 8, 6, 4, 1, 5, 1, 6, 1, 5, 3, 6, 3, 2, 1, 2, 3, 255, 1, 0, 1, 0, 0, 18, 0, 0, 0, 43, 0, 9, 8, 3, 4, 3, 3, 3, 2, 3, 1, 0, 51, 0, 38, 0, 36, 0, 29, 0, 32, 176, 48, 16, 185, 29, 117, 12, 38, 62, 36, 222, 54, 115, 14, 31, 5, 19, 110, 31, 156, 114, 49, 72, 118, 170, 222, 198, 35, 2, 157, 70, 119, 22, 3, 3, 0, 70, 16, 0, 0, 66, 65, 4, 2, 101, 155, 22, 126, 36, 129, 157, 38, 134, 69, 42, 129, 248, 91, 137, 6, 1, 162, 148, 111, 174, 181, 230, 58, 15, 204, 18, 41, 247, 12, 168, 148, 236, 249, 44, 121, 82, 56, 47, 93, 190, 50, 204, 19, 113, 197, 86, 187, 107, 54, 142, 160, 97, 93, 64, 221, 144, 139, 234, 158, 146, 86, 5, 20, 3, 3, 0, 1, 1, 22, 3, 3, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 192, 88, 160, 101, 167, 70, 227, 66, 36, 6, 75, 111, 40, 98, 188, 45, 107, 81, 134, 2, 199, 187, 23, 18, 38, 16, 222, 125, 5, 83, 223, 74, 23, 3, 3, 0, 140, 0, 0, 0, 0, 0, 0, 0, 1, 49, 158, 146, 200, 87, 216, 24, 137, 224, 108, 20, 249, 31, 227, 72, 148, 41, 7, 108, 140, 222, 84, 162, 120, 201, 15, 21, 174, 222, 185, 195, 6, 155, 159, 35, 240, 236, 149, 46, 191, 11, 62, 188, 201, 254, 2, 42, 225, 192, 204, 106, 89, 136, 158, 143, 66, 19, 224, 56, 7, 120, 121, 145, 173, 244, 161, 91, 222, 124, 188, 204, 6, 21, 112, 136, 99, 167, 104, 239, 131, 31, 149, 162, 110, 60, 68, 48, 239, 78, 192, 235, 123, 42, 18, 60, 226, 154, 136, 46, 132, 138, 127, 86, 249, 105, 210, 46, 219, 123, 26, 136, 164, 189, 94, 201, 43, 1, 191, 114, 42, 6, 194, 41, 79, 14, 99, 247, 214, 59, 147, 96, 53}
	fmt.Println(string(data))
	h := sha1.New()
	h.Write(data)
	fmt.Printf("%x\n", h.Sum(nil))
}

func TestHex(t *testing.T) {
	fmt.Printf("% 02x\n", []byte{100, 200, 240})
}
